Codigo de dibujo tipo Pixel Art de 0 a 255
```python
import numpy as np
import cv2 as cv

img = np.ones((100, 100), dtype=np.uint8) * 124

# Dibujar figura en la imagen
img[18, 45] = 0
img[18, 46] = 0
img[18, 47] = 0
img[18, 48] = 0
img[18, 49] = 0
img[18, 50] = 0
img[18, 51] = 0
img[18, 52] = 0
img[18, 53] = 0
img[18, 54] = 0
img[18, 55] = 0
img[18, 56] = 0
img[18, 57] = 0

img[19, 40] = 0
img[19, 41] = 0
img[19, 42] = 0
img[19, 43] = 0
img[19, 44] = 0
img[19, 58] = 0
img[19, 59] = 0
img[19, 60] = 0
img[19, 61] = 0
img[19, 62] = 0

img[20, 39] = 0
img[20, 38] = 0
img[20, 37] = 0
img[20, 63] = 0
img[20, 64] = 0
img[20, 65] = 0

img[21, 36] = 0
img[21, 35] = 0
img[21, 66] = 0
img[21, 67] = 0

img[22, 34] = 0
img[22, 33] = 0
img[22, 68] = 0
img[22, 69] = 0

img[23, 32] = 0
img[23, 31] = 0
img[23, 70] = 0
img[23, 71] = 0

img[24, 30] = 0
img[24, 29] = 0
img[24, 28] = 0
img[24, 72] = 0
img[24, 73] = 0

img[25, 27] = 0
img[25, 31] = 0
img[25, 74] = 0

img[26, 26] = 0
img[26, 31] = 0
img[26, 75] = 0

img[27, 25] = 0
img[27, 31] = 0
img[27, 76] = 0

img[28, 24] = 0
img[28, 32] = 0
img[28, 77] = 0

img[29, 23] = 0
img[29, 32] = 0
img[29, 78] = 0
img[29, 79] = 0

img[30, 22] = 0
img[30, 32] = 0
img[30, 80] = 0

img[31, 21] = 0
img[31, 32] = 0
img[31, 33] = 0
img[31, 80] = 0

img[32, 20] = 0
img[32, 33] = 0
img[32, 81] = 0

img[33, 19] = 0
img[33, 33] = 0
img[33, 82] = 0

img[34, 19] = 0
img[34, 34] = 0
img[34, 35] = 0
img[34, 83] = 0

img[35, 19] = 0
img[35, 35] = 0
img[35, 84] = 0

img[36, 18] = 0
img[36, 35] = 0
img[36, 36] = 0
img[36, 85] = 0

img[37, 17] = 0
img[37, 35] = 0
img[37, 87] = 0

img[38, 17] = 0
img[38, 35] = 0
img[38, 36] = 0
img[38, 87] = 0

img[39, 17] = 0
img[39, 36] = 0
img[39, 87] = 0

img[40, 16] = 0
img[40, 36] = 0
img[40, 37] = 0
img[40, 88] = 0

img[41, 16] = 0
img[41, 37] = 0
img[41, 38] = 0
img[41, 88] = 0

img[40, 16] = 0
img[40, 36] = 0
img[40, 37] = 0
img[40, 88] = 0

# Mostrar imagen
cv.imshow("imagen", img)
cv.waitKey()
cv.destroyAllWindows()


Codigo de OpenCV con figuras geometricas
```python
import cv2 as cv
import numpy as np

img = np.ones((500, 500, 3), dtype=np.uint8)*210
cv.circle(img, (350, 350), 80, (10,225,30), -1)
cv.circle(img, (250, 250), 40, (0,0,0), -1)

cv.line(img, (5,3), (234, 240), (0,234,21), 3   )
cv.rectangle(img, (50,10), (60,60), (0,0,0), 3 )
pts = np.array([[20,5],[20,30],[10,20],[50,10]], np.int32)
pts = pts.reshape((-1,1,2))
cv.polylines(img,[pts],True,(0,0,0), 3)
cv.imshow('img', img)
cv.waitKey()
cv.destroyAllWindows()


Este código utiliza el flujo óptico de Lucas-Kanade para rastrear
el movimiento de una "pelotita" (un punto en el centro de la imagen)
y muestra la trayectoria de la pelotita 

```python
import numpy as np
import cv2 as cv

# Iniciar la captura de video desde la cámara
cap = cv.VideoCapture(0)

# Parámetros para el flujo óptico Lucas-Kanade
lk_params = dict(winSize=(15, 15), maxLevel=2,
                 criteria=(cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 0.03))

# Leer el primer frame de la cámara
ret, first_frame = cap.read()
prev_gray = cv.cvtColor(first_frame, cv.COLOR_BGR2GRAY)

# Posición inicial de la pelotita (un único punto en el centro de la imagen)
ball_pos = np.array([[500, 500]], dtype=np.float32)
ball_pos = ball_pos[:, np.newaxis, :]

while True:
    # Capturar el siguiente frame
    ret, frame = cap.read()
    if not ret:
        break

    # Convertir el frame a escala de grises
    gray_frame = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

    # Calcular el flujo óptico para mover la pelotita
    new_ball_pos, st, err = cv.calcOpticalFlowPyrLK(prev_gray, gray_frame, ball_pos, None, **lk_params)

    # Si se detecta el nuevo movimiento, actualizar la posición de la pelotita
    if new_ball_pos is not None:
        ball_pos = new_ball_pos

        # Dibujar la pelotita en su nueva posición
        a, b = ball_pos.ravel()
        frame = cv.circle(frame, (int(a), int(b)), 20, (0, 255, 0), -1)
    
    # Dibujar un rectángulo en la imagen
    cv.rectangle(frame, (15, 15), (700, 700), (234, 43, 34), 5)
    
    # Mostrar solo una ventana con la pelotita en movimiento
    cv.imshow('Pelota en movimiento', frame)

    # Actualizar el frame anterior para el siguiente cálculo
    prev_gray = gray_frame.copy()

    # Presionar 'Esc' para salir
    if cv.waitKey(30) & 0xFF == 27:
        break

# Liberar la captura y destruir todas las ventanas
cap.release()
cv.destroyAllWindows()


Este código captura video en tiempo real desde la cámara, convierte 
cada fotograma a espacio de color HSV

```python
import numpy as np
import cv2 as cv

# Iniciar la captura de video desde la cámara
cap = cv.VideoCapture(0)

while(True):
    ret, img = cap.read()
    if ret:
        # Mostrar el video en una ventana
        cv.imshow('video', img)

        # Convertir la imagen a espacio de color HSV
        hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)

        # Definir los umbrales de color en el espacio HSV
        uba = (90, 25, 75)  # Umbral alto
        ubb = (40, 40, 40)  # Umbral bajo

        # Crear una máscara que filtra los colores dentro del rango
        mask = cv.inRange(hsv, ubb, uba)

        # Aplicar la máscara a la imagen original
        res = cv.bitwise_and(img, img, mask=mask)

        # Mostrar la imagen resultante
        cv.imshow('res', res)

        # Salir del bucle si se presiona la tecla 'Esc' (código 27)
        k = cv.waitKey(1) & 0xFF
        if k == 27:
            break
    else:
        break

# Liberar la captura y destruir todas las ventanas
cap.release()
cv.destroyAllWindows()


Este código utiliza la técnica de "croma key" para crear
un efecto de invisibilidad o capa de Harry Potter
```python
import cv2
import numpy as np

# Captura de video desde la cámara
cap = cv2.VideoCapture(0)

# Permitir que la cámara se estabilice
cv2.waitKey(2000)

# Capturar el fondo durante unos segundos
ret, background = cap.read()
if not ret:
    print("Error al capturar el fondo.")
    cap.release()
    exit()

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Convertir el cuadro a espacio de color HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Definir el rango de color de la tela (verde, en este caso) en HSV
    lower_green = np.array([50, 20, 50])
    upper_green = np.array([130, 255, 255])

    # Crear una máscara que detecta el área verde
    mask = cv2.inRange(hsv, lower_green, upper_green)

    # Refinar la máscara (puedes ajustar los parámetros para mejorar la detección)

    # Invertir la máscara para obtener las áreas que no son verdes
    mask_inv = cv2.bitwise_not(mask)

    # Aplicar la máscara a la imagen original para mostrar solo las partes no verdes
    res1 = cv2.bitwise_and(frame, frame, mask=mask_inv)

    # Aplicar la máscara al fondo para cubrir las partes verdes
    res2 = cv2.bitwise_and(background, background, mask=mask)

    # Combinar ambas imágenes
    final_output = cv2.addWeighted(res1, 1, res2, 1, 0) 

    # Mostrar el resultado final
    cv2.imshow("Capa de Invisibilidad", final_output)

    # Presionar 'q' para salir
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Liberar los recursos
cap.release()
cv2.destroyAllWindows()


Crea diferentes figuras por medio las parametricas
```python
import numpy as np
import cv2

# Definir los parámetros iniciales
width, height = 700, 700  # Ampliar la ventana para ver toda la figura
img = np.ones((height, width, 3), dtype=np.uint8)*255

# Parámetros de la curva de Limacon
a, b = 150, 100  # Reducir los valores de a y b para que la curva se ajuste mejor
k = 0.5  # Constante de multiplicación del ángulo
theta_increment = 0.05  # Incremento del ángulo
max_theta = 2 * np.pi  # Un ciclo completo

# Centro de la imagen
center_x, center_y = width // 2, height // 2

theta = 0  # Ángulo inicial

while True:  # Bucle infinito
    # Limpiar la imagen
    img = np.ones((width, height, 3), dtype=np.uint8) * 255
    
    # Dibujar la curva completa desde 0 hasta theta
    for t in np.arange(0, theta, theta_increment):
        # Calcular las coordenadas paramétricas (x, y) para la curva de Limacon
        r = a + b * np.cos(k * t)
        x = int(center_x + r * np.cos(t))
        y = int(center_y + r * np.sin(t))
        
        # Dibujar un círculo en la posición calculada
        cv2.circle(img, (x, y), 2, (70, 15, 76), 2)  # Color rojo
        cv2.circle(img, (x+5, y+5), 2, (0, 0, 0), 2)  # Color negro

    # Mostrar la constante k en la imagen
    # cv2.putText(img, f"k = {k:.2f}", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    
    # Mostrar la imagen
    cv2.imshow("Parametric Animation", img)
    
    # Incrementar el ángulo
    theta += theta_increment
    
    # Reiniciar theta si alcanza su valor máximo
    # if theta >= max_theta:
    #     theta = 0  # Reinicia la animación para que se repita

    # Pausar para ver la animación
    if cv2.waitKey(30) & 0xFF == 27:  # Esperar 30ms, salir con 'ESC'
        break

# Cerrar la ventana al finalizar
cv2.destroyAllWindows()


El código proporcionado es un programa en Python que utiliza la biblioteca OpenCV 
para capturar video desde una cámara web,
```python
import cv2 as cv
import numpy as np
cap = cv.VideoCapture(0)

while(True):
    ret, img = cap.read()
    if ret:
        cv.imshow('video', img)
        img2 = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
        hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)
        w, h = img2.shape
        img3 = 255 - img2
        cv.imshow('img2', img2)
        cv.imshow('hsv', hsv)
        cv.imshow('img', img3)
        k = cv.waitKey(1) & 0xFF
        if k == 27:    
            break  
    else:
        break

cap.release()
cv.destroyAllWindows()



Este código crea una animación en 3D donde un cubo se
mueve y rota en función de la posición de un objeto detectado en la cámara. 
Utiliza OpenCV para calcular el flujo óptico (movimiento)

```python
import numpy as np
import cv2 as cv
import glfw
from OpenGL.GL import *
from OpenGL.GLU import *
import sys

# Inicialización de OpenGL
window = None
angle = -5  # Ángulo de rotación del cubo
x_opengl = 0.0  # Posición X del cubo
y_opengl = 0.0  # Posición Y del cubo
scale = 0.1  # Escala del cubo
prev_x = 1  # Posición X del contorno anterior (para calcular el movimiento)
prev_y = 0  # Posición Y del contorno anterior (para calcular el movimiento)

# Variables para flujo óptico
lk_params = dict(winSize=(15, 15), maxLevel=2,
                 criteria=(cv.TERM_CRITERIA_EPS | cv.TERM_CRITERIA_COUNT, 10, 0.03))

# Capturar video desde la cámara
cap = cv.VideoCapture(0)

# Leer el primer frame de la cámara
ret, first_frame = cap.read()
prev_gray = cv.cvtColor(first_frame, cv.COLOR_BGR2GRAY)

# Posición inicial de la pelotita (un único punto en el centro de la imagen)
ball_pos = np.array([[500, 500]], dtype=np.float32)
ball_pos = ball_pos[:, np.newaxis, :]

def init():
    """Configuración inicial de OpenGL"""
    glClearColor(7.0, 5.0, 2.0, 1.0)  # Color de fondo
    glEnable(GL_DEPTH_TEST)  # Activar prueba de profundidad para 3D
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(45, 1.0, 1.0, 50.0)
    glMatrixMode(GL_MODELVIEW)

def draw_cube(x, y, scale, angle):
    """Dibuja un cubo 3D en la ventana OpenGL"""
    glPushMatrix()
    glTranslatef(x, y, -25.0)  # Posición del cubo
    glScalef(scale, scale, scale)  # Escalar el cubo en función de la distancia
    glRotatef(angle, 0, 1, 0)  # Rotar el cubo en todos los ejes
    glBegin(GL_QUADS)
    
    # Colores de las caras del cubo
    glColor3f(1.0, 0.0, 0.0)  # Rojo
    glVertex3f(1, 1, -1)
    glVertex3f(-1, 1, -1)
    glVertex3f(-1, 1, 1)
    glVertex3f(1, 1, 1)
    glColor3f(0.0, 1.0, 0.0)  # Verde
    glVertex3f(1, -1, 1)
    glVertex3f(-1, -1, 1)
    glVertex3f(-1, -1, -1)
    glVertex3f(1, -1, -1)
    glColor3f(0.0, 0.0, 1.0)  # Azul
    glVertex3f(1, 1, 1)
    glVertex3f(-1, 1, 1)
    glVertex3f(-1, -1, 1)
    glVertex3f(1, -1, 1)
    glColor3f(1.0, 1.0, 0.0)  # Amarillo
    glVertex3f(1, -1, -1)
    glVertex3f(-1, -1, -1)
    glVertex3f(-1, 1, -1)
    glVertex3f(1, 1, -1)
    glColor3f(1.0, 0.0, 1.0)  # Magenta
    glVertex3f(-1, 1, 1)
    glVertex3f(-1, 1, -1)
    glVertex3f(-1, -1, -1)
    glVertex3f(-1, -1, 1)
    glColor3f(0.0, 1.0, 1.0)  # Cyan
    glVertex3f(1, 1, -1)
    glVertex3f(1, 1, 1)
    glVertex3f(1, -1, 1)
    glVertex3f(1, -1, -1)
    glEnd()
    glPopMatrix()

def process_frame():
    global x_opengl, y_opengl, scale, angle, prev_x, prev_y, ball_pos, prev_gray

    # Captura el siguiente frame
    ret, frame = cap.read()
    if not ret:
        return

    # Convertir el frame a escala de grises
    gray_frame = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

    # Calcular el flujo óptico para mover la pelotita
    new_ball_pos, st, err = cv.calcOpticalFlowPyrLK(prev_gray, gray_frame, ball_pos, None, **lk_params)

    # Si se detecta el nuevo movimiento, actualizar la posición de la pelotita
    if new_ball_pos is not None:
        ball_pos = new_ball_pos
        a, b = ball_pos.ravel()
        x_opengl = a / 320.0 - 1  # Normalizar la posición X
        y_opengl = -(b / 240.0 - 1)  # Normalizar la posición Y y reflejar verticalmente
        scale = np.linalg.norm(ball_pos) / 150.0  # Ajustar escala según la distancia de la pelotita

    # Actualizar el frame anterior para el siguiente cálculo
    prev_gray = gray_frame.copy()

    # Solo rotar cuando se detecte movimiento
    angle += 1  # Incrementar el ángulo solo cuando hay movimiento

def main():
    global window, angle

    # Inicializar GLFW
    if not glfw.init():
        sys.exit()

    # Crear ventana de GLFW
    width, height = 640, 480
    window = glfw.create_window(width, height, "Cubo 3D con Control por Mano", None, None)
    if not window:
        glfw.terminate()
        sys.exit()

    # Configurar el contexto de OpenGL en la ventana
    glfw.make_context_current(window)

    # Configuración de viewport y OpenGL
    glViewport(0, 0, width, height)
    init()

    # Bucle principal
    while not glfw.window_should_close(window):
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)  # Limpiar pantalla y buffer de profundidad
        glLoadIdentity()

        # Procesar el frame para actualizar la posición y escala
        process_frame()

        # Dibujar el cubo
        draw_cube(x_opengl, y_opengl, scale, angle)

        glfw.swap_buffers(window)  # Intercambiar buffers para animación suave
        glfw.poll_events()

    glfw.terminate()  # Cerrar GLFW al salir
    cap.release()  # Liberar la cámara
    cv.destroyAllWindows()

if __name__ == "__main__":
    main()


Este codigo crea un plano con casas y utilizando la rotacion con OpenGL y Flujo Optico

```python
import glfw
from OpenGL.GL import *
from OpenGL.GLU import gluPerspective, gluLookAt
import sys

def init():
    """Configuración inicial de OpenGL"""
    glClearColor(0.5, 0.8, 1.0, 1.0)  # Fondo azul cielo
    glEnable(GL_DEPTH_TEST)           # Activar prueba de profundidad

    # Configuración de la perspectiva
    glMatrixMode(GL_PROJECTION)
    gluPerspective(60, 1.0, 0.1, 100.0)  # Campo de visión más amplio
    glMatrixMode(GL_MODELVIEW)

def draw_cube():
    """Dibuja el cubo (base de la casa)"""
    glBegin(GL_QUADS)
    glColor3f(0.8, 0.5, 0.2)  # Marrón para todas las caras

    # Frente
    glVertex3f(-1, 0, 1)
    glVertex3f(1, 0, 1)
    glVertex3f(1, 1, 1)
    glVertex3f(-1, 1, 1)

    # Atrás
    glVertex3f(-1, 0, -1)
    glVertex3f(1, 0, -1)
    glVertex3f(1, 1, -1)
    glVertex3f(-1, 1, -1)

    # Izquierda
    glVertex3f(-1, 0, -1)
    glVertex3f(-1, 0, 1)
    glVertex3f(-1, 1, 1)
    glVertex3f(-1, 1, -1)

    # Derecha
    glVertex3f(1, 0, -1)
    glVertex3f(1, 0, 1)
    glVertex3f(1, 1, 1)
    glVertex3f(1, 1, -1)

    # Arriba
    glColor3f(0.9, 0.6, 0.3)  # Color diferente para el techo
    glVertex3f(-1, 1, -1)
    glVertex3f(1, 1, -1)
    glVertex3f(1, 1, 1)
    glVertex3f(-1, 1, 1)

    # Abajo
    glColor3f(0.6, 0.4, 0.2)  # Suelo más oscuro
    glVertex3f(-1, 0, -1)
    glVertex3f(1, 0, -1)
    glVertex3f(1, 0, 1)
    glVertex3f(-1, 0, 1)
    glEnd()

def draw_roof():
    """Dibuja el techo (pirámide)"""
    glBegin(GL_TRIANGLES)
    glColor3f(0.9, 0.1, 0.1)  # Rojo brillante

    # Frente
    glVertex3f(-1, 1, 1)
    glVertex3f(1, 1, 1)
    glVertex3f(0, 2, 0)

    # Atrás
    glVertex3f(-1, 1, -1)
    glVertex3f(1, 1, -1)
    glVertex3f(0, 2, 0)

    # Izquierda
    glVertex3f(-1, 1, -1)
    glVertex3f(-1, 1, 1)
    glVertex3f(0, 2, 0)

    # Derecha
    glVertex3f(1, 1, -1)
    glVertex3f(1, 1, 1)
    glVertex3f(0, 2, 0)
    glEnd()

def draw_ground():
    """Dibuja un plano para representar el suelo o calle"""
    glBegin(GL_QUADS)
    glColor3f(0.3, 0.3, 0.3)  # Gris oscuro para la calle

    # Coordenadas del plano
    glVertex3f(-20, 0, 20)
    glVertex3f(20, 0, 20)
    glVertex3f(20, 0, -20)
    glVertex3f(-20, 0, -20)
    glEnd()

def draw_house():
    """Dibuja una casa (base + techo)"""
    draw_cube()  # Base de la casa
    draw_roof()  # Techo

def draw_scene():
    """Dibuja toda la escena con 4 casas"""
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()

    # Configuración de la cámara
    gluLookAt(10, 8, 15,  # Posición de la cámara
              0, 0, 0,    # Punto al que mira
              0, 1, 0)    # Vector hacia arriba

    # Dibujar el suelo
    draw_ground()

    # Dibujar las casas en diferentes posiciones
    positions = [
        (-5, 0, -5),  # Casa 1
        (5, 0, -5),   # Casa 2
        (-5, 0, 5),   # Casa 3
        (5, 0, 5)     # Casa 4
        
    ]
    for pos in positions:
        glPushMatrix()
        glTranslatef(*pos)  # Mover la casa a la posición actual
        draw_house()        # Dibujar la casa
        glPopMatrix()

    glfw.swap_buffers(window)

def main():
    global window

    # Inicializar GLFW
    if not glfw.init():
        sys.exit()
    
    # Crear ventana de GLFW
    width, height = 800, 600
    window = glfw.create_window(width, height, "Escena con 4 casas", None, None)
    if not window:
        glfw.terminate()
        sys.exit()

    glfw.make_context_current(window)
    glViewport(0, 0, width, height)
    init()

    # Bucle principal
    while not glfw.window_should_close(window):
        draw_scene()
        glfw.poll_events()

    glfw.terminate()

if __name__ == "__main__":
    main()



Este codigo crea una figura en 3D con rotacion y traslacion
```python
import glfw
from OpenGL.GL import glClearColor, glEnable, glClear, glLoadIdentity, glTranslatef, glRotatef, glMatrixMode
from OpenGL.GL import glBegin, glColor3f, glVertex3f, glEnd, glFlush, glViewport
from OpenGL.GL import GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_DEPTH_TEST, GL_QUADS, GL_PROJECTION, GL_MODELVIEW
from OpenGL.GLU import gluPerspective
import sys

# Variables globales
window = None
angle_x, angle_y = 0, 0  # Ángulos de rotación en los ejes X e Y
last_x, last_y = None, None  # Última posición del ratón para calcular la diferencia

def init():
    # Configuración inicial de OpenGL
    glClearColor(0.0, 0.0, 0.0, 1.0)  # Color de fondo
    glEnable(GL_DEPTH_TEST)  # Activar prueba de profundidad para 3D

    # Configuración de proyección
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(45, 1.0, 0.1, 50.0)

    # Cambiar a la matriz de modelo para los objetos
    glMatrixMode(GL_MODELVIEW)

def draw_cube():
    global angle_x, angle_y
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)  # Limpiar pantalla y buffer de profundidad

    # Configuración de la vista del cubo
    glLoadIdentity()
    glTranslatef(0.0, 0.0, -5)  # Alejar el cubo para que sea visible
    glRotatef(angle_x, 1, 0, 0)   # Rotar el cubo en el eje X
    glRotatef(angle_y, 0, 1, 0)   # Rotar el cubo en el eje Y

    glBegin(GL_QUADS)  # Iniciar el cubo como un conjunto de caras (quads)

    # Cada conjunto de cuatro vértices representa una cara del cubo
    glColor3f(1.0, 0.0, 0.0)  # Rojo
    glVertex3f( 1, 1,-1)
    glVertex3f(-1, 1,-1)
    glVertex3f(-1, 1, 1)
    glVertex3f( 1, 1, 1)

    glColor3f(0.0, 1.0, 0.0)  # Verde
    glVertex3f( 1,-1, 1)
    glVertex3f(-1,-1, 1)
    glVertex3f(-1,-1,-1)
    glVertex3f( 1,-1,-1)

    glColor3f(0.0, 0.0, 1.0)  # Azul
    glVertex3f( 1, 1, 1)
    glVertex3f(-1, 1, 1)
    glVertex3f(-1,-1, 1)
    glVertex3f( 1,-1, 1)

    glColor3f(1.0, 1.0, 0.0)  # Amarillo
    glVertex3f( 1,-1,-1)
    glVertex3f(-1,-1,-1)
    glVertex3f(-1, 1,-1)
    glVertex3f( 1, 1,-1)

    glColor3f(1.0, 0.0, 1.0)  # Magenta
    glVertex3f(-1, 1, 1)
    glVertex3f(-1, 1,-1)
    glVertex3f(-1,-1,-1)
    glVertex3f(-1,-1, 1)

    glColor3f(0.0, 1.0, 1.0)  # Cyan
    glVertex3f( 1, 1,-1)
    glVertex3f( 1, 1, 1)
    glVertex3f( 1,-1, 1)
    glVertex3f( 1,-1,-1)

    glEnd()
    glFlush()

    glfw.swap_buffers(window)  # Intercambiar buffers para animación suave

def mouse_callback(window, xpos, ypos):
    global angle_x, angle_y, last_x, last_y

    # Si es la primera vez que movemos el ratón, inicializamos last_x y last_y
    if last_x is None or last_y is None:
        last_x, last_y = xpos, ypos

    # Calcular las diferencias en el movimiento del ratón
    dx = xpos - last_x
    dy = ypos - last_y

    # Ajustar los ángulos de rotación en función del movimiento del ratón
    angle_x += dy * 0.1  # El factor 0.1 ajusta la sensibilidad
    angle_y += dx * 0.1

    # Actualizar las posiciones anteriores del ratón
    last_x, last_y = xpos, ypos

def main():
    global window

    # Inicializar GLFW
    if not glfw.init():
        sys.exit()

    # Crear ventana de GLFW
    width, height = 500, 500
    window = glfw.create_window(width, height, "Cubo 3D Controlado por Ratón", None, None)
    if not window:
        glfw.terminate()
        sys.exit()

    # Configurar el contexto de OpenGL en la ventana
    glfw.make_context_current(window)
    glViewport(0, 0, width, height)
    init()

    # Configurar el callback de ratón
    glfw.set_cursor_pos_callback(window, mouse_callback)

    # Bucle principal
    while not glfw.window_should_close(window):
        draw_cube()
        glfw.poll_events()

    glfw.terminate()  # Cerrar GLFW al salir

if __name__ == "__main__":
    main()
